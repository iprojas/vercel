{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/56994/Desktop/vercel/src/index.js\",\n    _s = $RefreshSig$();\n\nimport { render } from 'react-dom';\nimport React, { useState } from 'react';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-with-gesture';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = ['https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_17_Star.jpg', 'https://upload.wikimedia.org/wikipedia/en/f/ff/RWS_Tarot_21_World.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg', 'https://upload.wikimedia.org/wikipedia/en/thumb/9/90/RWS_Tarot_00_Fool.jpg/640px-RWS_Tarot_00_Fool.jpg', 'https://upload.wikimedia.org/wikipedia/en/3/3c/RWS_Tarot_10_Wheel_of_Fortune.jpg']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  y: i * -4,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  _s();\n\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.1; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 6000);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n    },\n    children: /*#__PURE__*/_jsxDEV(animated.div, { ...bind(i),\n      style: {\n        transform: interpolate([rot, scale], trans),\n        backgroundImage: `url(${cards[i]})`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this));\n}\n\n_s(Deck, \"GJ+tDNDoxUfn3sSn5jI87QbWEeI=\", false, function () {\n  return [useSprings, useGesture];\n});\n\n_c = Deck;\nrender( /*#__PURE__*/_jsxDEV(Deck, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 8\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["/mnt/c/Users/56994/Desktop/vercel/src/index.js"],"names":["render","React","useState","useSprings","animated","interpolate","useGesture","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","gone","Set","props","set","length","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage","document","getElementById"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,cAAlD;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAO,cAAP;;AAEA,MAAMC,KAAK,GAAG,CAEZ,sEAFY,EAGZ,uEAHY,EAIZ,wEAJY,EAKZ,0EALY,EAMV,wGANU,EAOZ,kFAPY,CAAd,C,CAUA;;AACA,MAAMC,EAAE,GAAIC,CAAD,KAAQ;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAhB;AAAmBG,EAAAA,KAAK,EAAE,CAA1B;AAA6BC,EAAAA,GAAG,EAAE,CAAC,EAAD,GAAMC,IAAI,CAACC,MAAL,KAAgB,EAAxD;AAA4DC,EAAAA,KAAK,EAAEP,CAAC,GAAG;AAAvE,CAAR,CAAX;;AACA,MAAMQ,IAAI,GAAIR,CAAD,KAAQ;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAhB;AAAmBI,EAAAA,GAAG,EAAE,CAAxB;AAA2BD,EAAAA,KAAK,EAAE,GAAlC;AAAuCD,EAAAA,CAAC,EAAE,CAAC;AAA3C,CAAR,CAAb,C,CACA;;;AACA,MAAMO,KAAK,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAW,8CAA6CD,CAAC,GAAG,EAAG,gBAAeA,CAAE,cAAaC,CAAE,GAA7G;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,IAAD,IAASpB,QAAQ,CAAC,MAAM,IAAIqB,GAAJ,EAAP,CAAvB,CADc,CAC2B;;AACzC,QAAM,CAACC,KAAD,EAAQC,GAAR,IAAetB,UAAU,CAACI,KAAK,CAACmB,MAAP,EAAgBjB,CAAD,KAAQ,EAAE,GAAGD,EAAE,CAACC,CAAD,CAAP;AAAYQ,IAAAA,IAAI,EAAEA,IAAI,CAACR,CAAD;AAAtB,GAAR,CAAf,CAA/B,CAFc,CAEsE;AACpF;;AACA,QAAMkB,IAAI,GAAGrB,UAAU,CAAC,CAAC;AAAEsB,IAAAA,IAAI,EAAE,CAACC,KAAD,CAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA,KAAK,EAAE,CAACC,MAAD,CAA9B;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA,SAAS,EAAE,CAACC,IAAD,CAA7D;AAAqEC,IAAAA;AAArE,GAAD,KAAqF;AAC3G,UAAMC,OAAO,GAAGD,QAAQ,GAAG,GAA3B,CAD2G,CAC5E;;AAC/B,UAAME,GAAG,GAAGH,IAAI,GAAG,CAAP,GAAW,CAAC,CAAZ,GAAgB,CAA5B,CAF2G,CAE7E;;AAC9B,QAAI,CAACL,IAAD,IAASO,OAAb,EAAsBf,IAAI,CAACiB,GAAL,CAASV,KAAT,EAHqF,CAGrE;;AACtCJ,IAAAA,GAAG,CAAEhB,CAAD,IAAO;AACT,UAAIoB,KAAK,KAAKpB,CAAd,EAAiB,OADR,CACe;;AACxB,YAAM+B,MAAM,GAAGlB,IAAI,CAACmB,GAAL,CAASZ,KAAT,CAAf;AACA,YAAMnB,CAAC,GAAG8B,MAAM,GAAG,CAAC,MAAME,MAAM,CAACC,UAAd,IAA4BL,GAA/B,GAAqCR,IAAI,GAAGE,MAAH,GAAY,CAArE,CAHS,CAG8D;;AACvE,YAAMnB,GAAG,GAAGmB,MAAM,GAAG,GAAT,IAAgBQ,MAAM,GAAGF,GAAG,GAAG,EAAN,GAAWF,QAAd,GAAyB,CAA/C,CAAZ,CAJS,CAIqD;;AAC9D,YAAMxB,KAAK,GAAGkB,IAAI,GAAG,GAAH,GAAS,CAA3B,CALS,CAKoB;;AAC7B,aAAO;AAAEpB,QAAAA,CAAF;AAAKG,QAAAA,GAAL;AAAUD,QAAAA,KAAV;AAAiBI,QAAAA,KAAK,EAAE4B,SAAxB;AAAmCC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,OAAO,EAAEjB,IAAI,GAAG,GAAH,GAASU,MAAM,GAAG,GAAH,GAAS;AAArD;AAA3C,OAAP;AACD,KAPE,CAAH;AAQA,QAAI,CAACV,IAAD,IAASR,IAAI,CAAC0B,IAAL,KAAczC,KAAK,CAACmB,MAAjC,EAAyCuB,UAAU,CAAC,MAAM3B,IAAI,CAAC4B,KAAL,MAAgBzB,GAAG,CAAEhB,CAAD,IAAOD,EAAE,CAACC,CAAD,CAAV,CAA1B,EAA0C,IAA1C,CAAV;AAC1C,GAbsB,CAAvB,CAJc,CAkBd;;AACA,SAAOe,KAAK,CAAC2B,GAAN,CAAU,CAAC;AAAEzC,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQE,IAAAA,GAAR;AAAaD,IAAAA;AAAb,GAAD,EAAuBH,CAAvB,kBACf,QAAC,QAAD,CAAU,GAAV;AAAsB,IAAA,KAAK,EAAE;AAAE2C,MAAAA,SAAS,EAAE/C,WAAW,CAAC,CAACK,CAAD,EAAIC,CAAJ,CAAD,EAAS,CAACD,CAAD,EAAIC,CAAJ,KAAW,eAAcD,CAAE,MAAKC,CAAE,OAA3C;AAAxB,KAA7B;AAAA,2BAEE,QAAC,QAAD,CAAU,GAAV,OAAkBgB,IAAI,CAAClB,CAAD,CAAtB;AAA2B,MAAA,KAAK,EAAE;AAAE2C,QAAAA,SAAS,EAAE/C,WAAW,CAAC,CAACQ,GAAD,EAAMD,KAAN,CAAD,EAAeM,KAAf,CAAxB;AAA+CmC,QAAAA,eAAe,EAAG,OAAM9C,KAAK,CAACE,CAAD,CAAI;AAAhF;AAAlC;AAAA;AAAA;AAAA;AAAA;AAFF,KAAmBA,CAAnB;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAMD;;GAzBQY,I;UAEclB,U,EAERG,U;;;KAJNe,I;AA2BTrB,MAAM,eAAC,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAD,EAAWsD,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAX,CAAN","sourcesContent":["import { render } from 'react-dom'\r\nimport React, { useState } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-with-gesture'\r\nimport './styles.css'\r\n\r\nconst cards = [\r\n\r\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_17_Star.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/f/ff/RWS_Tarot_21_World.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg',\r\n    'https://upload.wikimedia.org/wikipedia/en/thumb/9/90/RWS_Tarot_00_Fool.jpg/640px-RWS_Tarot_00_Fool.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/3/3c/RWS_Tarot_10_Wheel_of_Fortune.jpg'\r\n]\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = (i) => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = (i) => ({ x: 0, y: i * -4, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, set] = useSprings(cards.length, (i) => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.1 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    set((i) => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n    })\r\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set((i) => to(i)), 6000)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return props.map(({ x, y, rot, scale }, i) => (\r\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\r\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\r\n    </animated.div>\r\n  ))\r\n}\r\n\r\nrender(<Deck />, document.getElementById('root'))\r\n"]},"metadata":{},"sourceType":"module"}